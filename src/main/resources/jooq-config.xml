<!-- https://www.jooq.org/doc/latest/manual/code-generation/codegen-configuration/ -->
<configuration>
  <!-- jdbc config -->
  <jdbc>
    <url>jdbc:postgresql://localhost:5700/postgres?currentSchema=spring_demo</url>
    <user>postgres</user>
    <password>postgres</password>
  </jdbc>

  <generator>
    <!-- https://www.jooq.org/doc/latest/manual/code-generation/kotlingenerator/ -->
    <name>org.jooq.codegen.KotlinGenerator</name>

    <!-- database options -->
    <database>
      <name>org.jooq.meta.postgres.PostgresDatabase</name>
      <includes>.*</includes>
      <excludes>flyway_schema_history</excludes>
      <inputSchema>spring_demo</inputSchema>
    </database>

    <!-- generate options -->
    <generate>
      <!-- Tell the KotlinGenerator to generate properties in addition to methods for these paths. Default is true. -->
      <implicitJoinPathsAsKotlinProperties>true</implicitJoinPathsAsKotlinProperties>

      <!--  Workaround for Kotlin generating setX() setters instead of setIsX() in byte code for mutable properties called
            <code>isX</code>. Default is true. -->
      <kotlinSetterJvmNameAnnotationsOnIsPrefix>true</kotlinSetterJvmNameAnnotationsOnIsPrefix>

      <!-- Generate POJOs as data classes, when using the KotlinGenerator. Default is true. -->
      <pojosAsKotlinDataClasses>true</pojosAsKotlinDataClasses>
    </generate>

    <!-- target -->
    <target>
      <packageName>com.zlargon.springdemo.jooq</packageName>
      <directory>src/main/kotlin</directory>
    </target>
  </generator>
</configuration>
